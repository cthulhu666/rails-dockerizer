ARG RUBY_VERSION=<%= default_ruby_version %>
ARG BUNDLER_VERSION=<%= default_bundler_version %>
ARG NODE_VERSION=14
ARG WORKDIR=/app

# -------------
# builder stage
FROM ruby:${RUBY_VERSION} AS builder

ARG BUNDLER_VERSION
ARG NODE_VERSION
ARG WORKDIR

WORKDIR $WORKDIR

RUN gem install bundler:${BUNDLER_VERSION} && \
    curl -sL https://deb.nodesource.com/setup_${NODE_VERSION}.x | bash - && \
    apt-get update && \
    apt-get install nodejs -y && \
    npm install -g yarn

COPY Gemfile Gemfile.lock ./

# BUNDLE_PATH takes precedence over config and it is already set by some base images, so let's overwrite it.
ENV BUNDLE_PATH='vendor/bundle'
RUN bundle config set without 'test' && \
    bundle install

COPY package.json yarn.lock ./
RUN yarn install --check-files

# Precompile JS/CSS assets.
COPY app/assets ./app/assets
COPY app/javascript ./app/javascript
COPY bin ./bin
COPY config ./config
COPY Rakefile babel.config.js postcss.config.js ./
RUN bundle exec rake assets:precompile

# ----------
# main stage
FROM ruby:${RUBY_VERSION}-slim-buster

ARG WORKDIR

WORKDIR $WORKDIR

<% unless libs.empty? %>
RUN apt-get update && apt-get install -y <%= libs.join(', ') %>
<% end %>

ARG BUNDLER_VERSION
RUN gem install bundler:${BUNDLER_VERSION}

ENV RAILS_ENV=production
ENV PATH=$PATH:/app/bin

COPY --from=builder $WORKDIR .
RUN rm -r node_modules

COPY app ./app
COPY db ./db
COPY lib ./lib
COPY public ./public
COPY config.ru ./

# BUNDLE_PATH takes precedence over config and it is already set by some base images, so let's overwrite it.
ENV BUNDLE_PATH='vendor/bundle'
RUN bundle config set frozen 'true' && \
    bundle config set without 'development:test' && \
    bundle config set deployment 'true' && \
    bundle install --local && \
    bundle clean --force
